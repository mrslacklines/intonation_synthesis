FROM nvidia/cuda:10.0-base-ubuntu16.04

LABEL maintainer="Amazon AI"

RUN apt-get update && apt-get install -y --no-install-recommends --allow-unauthenticated \
        ca-certificates \
        cuda-command-line-tools-10-0 \
        cuda-cublas-dev-10-0 \
        cuda-cudart-dev-10-0 \
        cuda-cufft-dev-10-0 \
        cuda-curand-dev-10-0 \
        cuda-cusolver-dev-10-0 \
        cuda-cusparse-dev-10-0 \
        curl \
        libcudnn7=7.6.0.64-1+cuda10.0 \
        libgomp1 \
        gcc-4.9 \
        g++-4.9 \
        gcc-4.9-base \
        git \
        wget \
        vim \
        build-essential \
        ca-certificates \
        python3 \
        python3-pip \
        python3-setuptools \
        pkg-config \
        python3-dev \
        python3-numpy \
        software-properties-common \
        nano \
        ssh \
        openssh-server


RUN mkdir /var/run/sshd
RUN echo 'root:root' | chpasswd
RUN sed -i 's/#*PermitRootLogin prohibit-password/PermitRootLogin yes/g' /etc/ssh/sshd_config
# SSH login fix. Otherwise user is kicked off after login
RUN sed -i 's@session\s*required\s*pam_loginuid.so@session optional pam_loginuid.so@g' /etc/pam.d/sshd

RUN ln -s /usr/local/bin/pip3 /usr/bin/pip

RUN apt-get update && apt-get install -y --no-install-recommends --allow-unauthenticated  \
        nvinfer-runtime-trt-repo-ubuntu1604-5.0.2-ga-cuda10.0 && \
    apt-get update && apt-get install -y --no-install-recommends --allow-unauthenticated  \
        libnvinfer5=5.0.2-1+cuda10.0

RUN apt-get update && apt-get install -y --no-install-recommends libreadline-gplv2-dev libncursesw5-dev libssl-dev libsqlite3-dev tk-dev libgdbm-dev libc6-dev libbz2-dev

ENV PATH=/usr/local/nvidia/bin:$PATH

###########################################################################
# Python wonâ€™t try to write .pyc or .pyo files on the import of source modules
ENV PYTHONDONTWRITEBYTECODE=1 PYTHONUNBUFFERED=1 PYTHONIOENCODING=UTF-8 LANG=C.UTF-8 LC_ALL=C.UTF-8

# Some TF tools expect a "python" binary
RUN ln -s $(which ${PYTHON}) /usr/local/bin/python

##########################
# Project specific setup #
##########################

# set working directory
RUN mkdir -p /app
WORKDIR /app

RUN mkdir -p /opt/ml/input/config
RUN mkdir -p /opt/ml/input/data/training
RUN ln -s /opt/ml/input/data/training/ /opt/ml/input/data/testing 
RUN mkdir -p /opt/ml/model
RUN mkdir -p /opt/ml/output
RUN mkdir -p /app/entrypoints

ADD __init__.py .
ADD datasets.py .
ADD net.py .
ADD train.py .
ADD technical_indicators.py .
ADD utils.py .
ADD const.py .
ADD settings_base.py ./settings_base.py
ADD settings_dev.py ./settings.py

ADD hyperparameters.json /opt/ml/input/config/hyperparameters.json

ADD create_plots.py .
ADD feature_names.py .

# Extracts automatically
ADD model/model.tar.gz ./model

ADD requirements-dev.txt ./requirements.txt
RUN pip3 install --upgrade pip
RUN pip3 install -r requirements.txt

RUN git clone https://github.com/CSTR-Edinburgh/merlin.git && mv merlin merlin_repo && ln -s merlin_repo/src/ merlin && cd merlin_repo

ADD train.sh /app/entrypoints/train
RUN chmod +x /app/entrypoints/train
ENV PATH=/app/entrypoints:${PATH}

EXPOSE 22
CMD ["/usr/sbin/sshd", "-D"]